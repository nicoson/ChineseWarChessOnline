#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ChineseWarChessOnLine:server');
var http = require('http');
var socketio = require('socket.io');  //socket.io

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * websocket: broadcast event from client.
 */
var counter = 0;
var gameStatus = false;
var gameData = [];
var actSide = true;

socketio.listen(server).on('connection', function (socket) {
  socket.on('message', function (msg) {
    console.log('receive ', msg);
    console.log(typeof(msg));
    //将信息发送给其他客户端
    if(typeof(msg) == "string"){
      if(msg == "start"){gameStatus = true;}
      socket.broadcast.emit('message', msg);
    }else{
      socket.broadcast.emit('message', coordReverse(msg));
      //save game data for watcher
      gameData.push(actSide?msg:coordReverse(msg));
      actSide = !actSide;
    }

  });

  socket.on("connect", function(){
    counter++;
    console.log(counter);
  });

  socket.on("disconnect", function(){
    counter--;
    console.log(counter);
  });
});

function coordReverse(coord) {
  coord[0] = 8-coord[0];
  coord[1] = 9-coord[1];
  coord[2] = 8-coord[2];
  coord[3] = 9-coord[3];
  return coord;
}

console.log('Listening at: http://localhost:' + port);